<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaN</title>
  
  <subtitle>一腔孤勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-20T15:34:27.558Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZHAO Zinan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Complexity of Python Operations of Algorithm Problem Solutions</title>
    <link href="http://yoursite.com/2019/05/13/Python-Operations-Complexity-md/"/>
    <id>http://yoursite.com/2019/05/13/Python-Operations-Complexity-md/</id>
    <published>2019-05-13T13:46:58.000Z</published>
    <updated>2019-05-20T15:34:27.558Z</updated>
    
    <content type="html"><![CDATA[<p>If you have used Python, C++ and Java to solve algothm problmes, you will find some pythonic solutions in the discuss. It motivates me to write a summary of python operations complexity because of a question in zhihu <a href="https://www.zhihu.com/question/310632731" target="_blank" rel="noopener">为什么leetcode中python解法过于pythonic,而忽略了算法题主要关注的复杂度问题?</a>. This article is just a summary based on my past experience in algorithm problems solving and it is not a good guide for people who haven't heard about the complexity of codes and data strucutres. Also be reminded that the implementation in the article is in python3 and if you run it python2, there may be some bugs.</p><h2>View the source codes</h2><p>We can use the built-in <code>inspect</code> module to inspecte the source codes of a function, which helps us a lot to analyse the complexity of a function.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assume we want to see the source code of function foo</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inpect </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inpect.getsource(foo)</span><br><span class="line"><span class="comment"># return source code of foo function</span></span><br></pre></td></tr></table></figure></p><h2>Complexity of Data Structures</h2><h3>Stack</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># push</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">3</span>) <span class="comment"># the stack is like [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop the top of stack (tail of the list)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop() </span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure></p><p>Stack can be implemented with list in python. As the tail of a list is used as the top of the stack, the complexity of <code>push</code> and <code>pop</code> in stack will be <code>O(1)</code>.</p><h3>Queue</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># simple version with list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># enqueue</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="number">3</span>) <span class="comment"># queue like [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dequeue</span></span><br><span class="line">queue.pop(<span class="number">0</span>) </span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure></p><p>If we use list to implement it, the <code>enqueue</code> operation performs <code>O(1)</code> complexity as it operates on the tail of the list. But the <code>dequeue</code> takes <code>O(n)</code> complexity as it removes the first element of the list and the rest n-1 element needs to be moved one element forward.</p><p>Another better way to use queue data structure is like this:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># queue module </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> queue</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># enque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.get()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line"><span class="meta">... </span>    print(q.get(), end=<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># deque module</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">d = deque(<span class="string">'12345'</span>)</span><br><span class="line">d.append(<span class="string">'6'</span>) <span class="comment"># deque object [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enque</span></span><br><span class="line">d.popleft()</span><br></pre></td></tr></table></figure></p><p>According to the <a href="https://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c" target="_blank" rel="noopener">source code</a>, a deque is a doubly-linked list. As the <code>push</code> and <code>pop</code> operation from either side are approximately <code>O(1)</code> as long as it doesn't exceed the maximum size, the <code>deque</code> and <code>enqueue</code> operations of deque is of <code>O(1)</code> complexity. By the way, we can implement the queue with doubly-linked list by ourself as well, but it is not necessary as we have built-in <code>deque</code> module already.</p><h3>Heap / Priority Queue</h3><p>Use <code>heqpq</code> to implement a priority queue with priority. <code>(1, 'foo1')</code>: 1 is the priority and 'foo1' is the value. By default it is a minimum priority queue, we can use <code>-priority</code> to turn it into a maximum priority queue.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapify(p)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(p, (<span class="number">1</span>, <span class="string">'foo1'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(p, (<span class="number">2</span>, <span class="string">'foo2'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'foo1'</span>), (<span class="number">2</span>, <span class="string">'foo2'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappop(p)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'foo1'</span>)</span><br></pre></td></tr></table></figure></p><p>Another way to use priority queue in Python is to use <code>Queue</code> module in Python.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> queue </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># enque </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line"><span class="meta">... </span>    print(q.get())</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>From the <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Lib/asyncio/queues.py#L219" target="_blank" rel="noopener">source code</a>, we can know that the priority queue of <code>Queue</code> module is also implemented with <code>heapq</code> module. The complexity of <code>push</code> and <code>pop</code> methods are <code>O(n)</code> for both modules, while the initlization complexity of <code>heapify</code> is <code>O(n)</code> and that of putting elements one by one to the priority queue is <code>O(nlog(n))</code>. The difference between these two initialization methods are the same as the difference between <code>heapify</code> and <code>heapsort</code> explained in <a href="http://www.cs.toronto.edu/~krueger/cscB63h/lectures/tut02.txt" target="_blank" rel="noopener">this material</a>.</p><h3>Hash Table (dictionary) / Set</h3><p>As both dictionary and set in Python is implemented with hash table, the average case can be viewed as $O(1)$.</p><h2>To Be Continued</h2><p>This article only mentions the complexity of some data structures frequently used in Python. Hopefully, I will add some more complexity analysis of the algorithm solutions in Python in the future. Enjoy thinking~</p><h2>References</h2><ol><li><a href="https://stackoverflow.com/questions/6256983/how-are-deques-in-python-implemented-and-when-are-they-worse-than-lists#answer-6257048" target="_blank" rel="noopener">How are deques in Python Implemented, and When are They Worse than Lists?</a></li><li><a href="https://en.wikipedia.org/wiki/Hash_table#Performance_analysis" target="_blank" rel="noopener">Wikipedia Hash Tables</a></li><li><a href="https://stackoverflow.com/questions/3949310/how-is-set-implemented" target="_blank" rel="noopener">Stackoverflow: How is Set Implemented</a></li><li><a href="https://github.com/python/cpython/blob/master/Objects/setobject.c" target="_blank" rel="noopener">Set Source Code</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have used Python, C++ and Java to solve algothm problmes, you will find some pythonic solutions in the discuss. It motivates me to
      
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Why I Decided to Write a Blog</title>
    <link href="http://yoursite.com/2019/01/28/Reasons/"/>
    <id>http://yoursite.com/2019/01/28/Reasons/</id>
    <published>2019-01-27T16:00:00.000Z</published>
    <updated>2019-01-29T08:31:20.898Z</updated>
    
    <content type="html"><![CDATA[<p>It seems that all the programmers around me have their own blogs, while I am notthe kind of people who want to share one's own life with strangers. I can write down mysadness and happiness in my journal. The technical knowledge is kept neatly in myOnenote (I won't use Evernote until it can highlight the code block).</p><p>But today when I was reading the article <a href="http://www.ruanyifeng.com/blog/2019/01/prolog.html" target="_blank" rel="noopener">prolog</a>, it hit me that it'stime to have my own blog which shares interesting things. It is not a place toshow how learned I am, but where I can be heared by the world.</p><p>I am just like a child who finds the most wonderful shells on the beach and wantsto show it to the whole world.</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"Hello World. Welcome to see my beautiful shells."</span>)</span><br><span class="line">Hello World. Welcome to see my beautiful shells.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It seems that all the programmers around me have their own blogs, while I am not
the kind of people who want to share one&#39;s own life with
      
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
</feed>
